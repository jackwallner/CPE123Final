//Main File for the CPE 123 Project

//Timeline
int scene;
int s1;
int s2;

/* DECLARE VARIABLES */
// for fish
int fishNumber = 20;
float fishTime = 3;
float fishEyeMove = 0, fishTailMove = 0;
boolean fishTailSwitch = false;
boolean fishAnimate = false;
// for FirstFish
int FirstFishNumber = 1;
float FirstFishTime = 2.2;
float FirstFishEyeMove = 0, FirstFishTailMove = 0;
boolean FirstFishTailSwitch = false;
boolean FirstFishAnimate = false;
float fx, fy;
int FirstFishPX;
// for seaweeds
float theta=0.0;
float zeta=0.0;
float beta=0.0;
float eta=0.0;
int end1;
int swap;
int px;
int py;
// for sea monster
float monsterzeta=0;

/* DECLARE ARRAYS */
// for fish
PVector fishLoc[];
PVector fishDir[];
float fishScale[];
float fishRotate[];
color fishColor[];
color fishEyeColor[];
// for FirstFish
PVector FirstFishLoc[];
PVector FirstFishDir[];
float FirstFishScale[];
float FirstFishRotate[];
color FirstFishColor[];
color FirstFishEyeColor[];

//Setup Function
void setup() {
  size(1280, 720);
  background(18, 170, 190);
  //seaweed setup
  s1 = 500;
  s2 = 0;
  swap = 0;
  scene = 0;
  fx = width*1.15;
  fy = height/2-100;
  px = -800;
  py = height/2;

  // initializing arrays for fish 
  fishLoc = new PVector[fishNumber];
  fishDir = new PVector[fishNumber];
  fishScale = new float[fishNumber];
  fishRotate = new float[fishNumber];
  fishColor = new color[fishNumber];
  fishEyeColor = new color[fishNumber];
  // for fish
  for (int i = 0; i < fishNumber; i++) {
    fishLoc[i] = new PVector(width*-.1, (height-70)/fishNumber*i+40);
    fishDir[i] = new PVector(random(0.8, 1.7), 0);
    fishScale[i] = random(0.15, 0.65);
    //fishRotate[i] = random(radians(-30), radians(30));
    fishColor[i] = color(random(0, 255), random(0, 255), random(0, 255));
    fishEyeColor[i] = color(random(225, 255));
  }

  // initializing arrays for FirstFish 
  FirstFishLoc = new PVector[FirstFishNumber];
  FirstFishDir = new PVector[FirstFishNumber];
  FirstFishScale = new float[FirstFishNumber];
  FirstFishRotate = new float[FirstFishNumber];
  FirstFishColor = new color[FirstFishNumber];
  FirstFishEyeColor = new color[FirstFishNumber];
  // for FirstFish
  for (int i = 0; i < FirstFishNumber; i++) {
    FirstFishLoc[i] = new PVector(width*1.15, height/2-120);
    FirstFishDir[i] = new PVector(-1, 0);
    FirstFishScale[i] = -1;
    FirstFishRotate[i] = random(radians(-30), radians(30));
    FirstFishColor[i] = color(200, 0, 0);
    FirstFishEyeColor[i] = color(255);
  }
}

//Draw Function
void draw() {
  background(18, 170, 190);
  noStroke();
  //Seaweed, feel free to play around and move it accordingly
  swap = 0;
  seaweeds(0, 320, 1, 0.03);  
  seaweeds(1000, 1040, 0.5, 0.03);
  swap = 1;
  seaweeds(0, 1040, 0.5, 0.03);
  seaweeds(375, 80, 1.5, 0.03);
  swap = 2;
  seaweeds(800, 1040, 0.5, 0.03);
  seaweeds(500, 320, 1, 0.03);
  swap = 0;
  seaweeds(-200, 1040, 0.5, 0.03);
  //drawMonster(200, 200, 0.5);


  //if (scene >= 1) {
  // if (fx > 650) {
  //   float vx;
  //   float vy;
  //   vx = -5;
  //   vy = 0;
  //   fx += vx;
  //   fy += vy;
  //   FirstFish(fx, fy);
  // } 
  // if (fx <= 650) {
  //   FirstFish(650, fy);
  //   println("boom");
  // }
  //}


  //SCENE 1

  /*
  if (scene == 1){
   for (int i = 0; i < s1; i++){
   int s1x;
   float s1y;
   int s1r;
   s1x = -25;
   s1y = 340;
   s1r = 5;
   ManyFish(s1x+i, s1y, s1r, 1, 255);
   s1x += 1;
   println(s1x);
   //s1y = 100*sin(s1y);
   if (s1x < 340){
   s1x += 1;
   } else {
   s1x = 341;
   {
   
   
   }
   }
   }
   }
   */

  // Scene 1 (first fish appears)
  if (scene >= 1) {
    FirstFishAnimate();
  }
  if (fx > 600) {
    float vx;
    float vy;
    vx = -3;
    vy = 0;
    //vy = -1;
    fx += vx;
    fy += vy;

    drawFirstFish(fx, fy, -1, 0, #C80000, 255);

    //if (fy < 100) {
    //  vy = 1;
    //  fy += vy;
    //  drawFirstFish(fx, fy, -1, 0, #C80000, 255);
    //}
    
    //if (fy > 500) {
    //  vy = -1;
    //  fy += vy;
    //        drawFirstFish(fx, fy, -1, 0, #C80000, 255);
    //}
    
  }

  if (fx <= 600) {
    drawFirstFish(600, fy, -1, 0, #C80000, 255);
  }


  //Scene 2 (sea monster appears)
  if (scene == 2) {
    /*for (int i = 0; i < s2; i++){
     fill(18,170,190);
     rect(0,0, width, height*0.65);
     int x;
     int y;
     x = -500 + 5*i;
     y = height/2;
     drawMonster(x, y, 0.5);
     }
     */

    if (px < 600) {
      float vx;
      float vy;
      vx = 6;
      vy = 1*sin(radians(359));
      px += vx;
      py += vy;
      println(px);
      drawMonster(px, py, 0.5);
    }
  if (px >= 600) {
    drawMonster(600, py, 0.5);
    println("done");
  }
  }

  // Scene 3 (bunch of fish come out after sea monster)
  if (scene >= 3) {
    fishAnimate();
    for (int i = 0; i < fishNumber; i++) {
      //fish(fishLoc[i].x, fishLoc[i].y, fishScale[i], fishRotate[i], fishColor[i], 255);
      drawFish(fishLoc[i].x, fishLoc[i].y, fishScale[i], fishRotate[i], fishColor[i], 255);
    }
  

  if (px >= 600) {
    float vx;
    float vy;
    vx = 3;
    vy = 1*sin(radians(359));
    px += vx * 2;
    py += vy;
    drawMonster(px, py, 0.5);
  }
  }
} // bracket to end void draw()

// Seaweed Fucnctions

void seaweeds(int x, int y, float scaleS, float greta) {
  pushMatrix();
  scale(scaleS);
  translate(x, y);
  wave(0, 0, greta/6, greta/7, greta/4, greta/5);
  popMatrix();
}

void wave(int posX, int posY, float uheta, float aeta, float ceta, float feta) {
  fill(12, 148, 110);
  theta+=uheta;
  zeta+=aeta;
  beta+=ceta;
  eta+=feta;
  float z = zeta;
  float q = theta;
  float b = beta;
  float e = eta;
  float y;
  if (swap == 0) {
    for (int i=0; i < 25; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, 148-i*0.5, 110-i*0.5);
      y = sin(z)*50/2;
      pushMatrix();
      rotate(radians(270));
      translate((i*5)-425+posX, y+posY+400);
      ellipse(0, 0, 25, 25);
      popMatrix();
      z+=50/250f;
    }
    for (int i=0; i < 50; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(q)*50/2;
      pushMatrix();
      rotate(radians(300));
      translate((i*5)-150+posX, y+posY+580);
      ellipse(0, 0, 15, 15);
      popMatrix();
      q+=50/250f;
    }
    for (int i=0; i < 40; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(e)*50/2;
      pushMatrix();
      rotate(radians(240));
      translate((i*5)-600+posX, y+posY+175);
      ellipse(0, 0, 30, 30);
      popMatrix();
      e+=50/250f;
    }
    for (int i=0; i < 40; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(b)*50/2;
      pushMatrix();
      rotate(radians(255));
      translate((i*5)-525+posX, y+posY+330);
      ellipse(0, 0, 20, 20);
      popMatrix();
      b+=50/250f;
      fill(random(0, 40), 150-i*0.75, 110-i*0.75);
      ellipse(posX+425, posY+410, 150, 100);
    }
    fill(12, 148, 110);
    //fill(12,148,110);
    //ellipse(posX+425, posY+410, 150,100);
  } else if (swap == 1) { 
    for (int i=0; i < 35; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, 148-i*0.5, 110-i*0.5);
      y = sin(q)*50/2;
      pushMatrix();
      rotate(radians(270));
      translate((i*5)-425+posX, y+posY+400);
      ellipse(0, 0, 25, 25);
      popMatrix();
      q+=50/250f;
    }
    for (int i=0; i < 35; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(z)*50/2;
      pushMatrix();
      rotate(radians(300));
      translate((i*5)-150+posX, y+posY+580);
      ellipse(0, 0, 15, 15);
      popMatrix();
      z+=50/250f;
    }
    for (int i=0; i < 35; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(b)*50/2;
      pushMatrix();
      rotate(radians(240));
      translate((i*5)-600+posX, y+posY+175);
      ellipse(0, 0, 30, 30);
      popMatrix();
      b+=50/250f;
    }
    for (int i=0; i < 30; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(e)*50/2;
      pushMatrix();
      rotate(radians(255));
      translate((i*5)-525+posX, y+posY+330);
      ellipse(0, 0, 20, 20);
      popMatrix();
      e+=50/250f;
      fill(random(0, 40), 150-i*0.75, 110-i*0.75);
      ellipse(posX+425, posY+410, 150, 100);
    }
    fill(12, 148, 110);
    //fill(12,148,110);
    //ellipse(posX+425, posY+410, 150,100);
  } else if (swap == 2) { 
    for (int i=0; i < 30; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, 148-i*0.5, 110-i*0.5);
      y = sin(e)*50/2;
      pushMatrix();
      rotate(radians(270));
      translate((i*5)-425+posX, y+posY+400);
      ellipse(0, 0, 25, 25);
      popMatrix();
      e+=50/250f;
    }
    for (int i=0; i < 25; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(b)*50/2;
      pushMatrix();
      rotate(radians(300));
      translate((i*5)-150+posX, y+posY+580);
      ellipse(0, 0, 15, 15);
      popMatrix();
      b+=50/250f;
    }
    for (int i=0; i < 40; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(z)*50/2;
      pushMatrix();
      rotate(radians(240));
      translate((i*5)-600+posX, y+posY+175);
      ellipse(0, 0, 30, 30);
      popMatrix();
      z+=50/250f;
    }
    for (int i=0; i < 35; i++) {
      fill(random(0, 40), 150-(i*0.75), 110-(i*0.75), random(200, 255));
      //fill(random(0,40), (random(140,160)-i*0.75), (random(100,120)-i*0.75));
      //fill(12, (int)148-i*0.5, (int)110-i*0.5);
      y = sin(q)*50/2;
      pushMatrix();
      rotate(radians(255));
      translate((i*5)-525+posX, y+posY+330);
      ellipse(0, 0, 20, 20);
      popMatrix();
      q+=50/250f;
      fill(random(0, 40), 150-i*0.75, 110-i*0.75);
      ellipse(posX+425, posY+410, 150, 100);
    }
    fill(12, 148, 110);
    //fill(12,148,110);
    //ellipse(posX+425, posY+410, 150,100);
  }
}

void monsterwave(int posX, int posY) {
  fill(12, 148, 110);
  monsterzeta+=0.04;
  float z = monsterzeta;
  float y;

  for (int i=0; i < 100; i++) {
    fill(random(0, 40), (random(140, 160)-i*0.75), (random(100, 120)-i*0.75));
    fill(12, (int)100-i*0.5, (int)248-i*0.5);
    y = sin(z)*50/2;
    pushMatrix();
    translate((i*5)+250+posX, y+posY+280);
    ellipse(0, 0, 45, 45);

    //eye
    if (i > 98) {
      fill(255, 255, 0);
      translate(-470, -265);
      triangle(470, 250, 470, 270, 490, 260);
      fill(0);
      ellipse(479, 260, 8, 10);

      //bottom fins
    }
    if (i > 60 && i < 62) {
      fill(0, 100, 50);
      translate(0, 50);
      rotate(radians(30));
      translate(-400, -200);
      ellipse(400, 200, 30, 80);
      fill(0, 150, 50);
      translate(420, 180);
      rotate(radians(-10));
      translate(-400, -200);
      ellipse(400, 200, 50, 100);


      //tail
    }
    if (i > 2 && i < 4) {
      fill(0, 100, 50);
      translate(-100, -50);
      rotate(radians(30));
      translate(-200, -200);
      ellipse(200, 200, 220, 80);
      fill(0, 150, 50);
      translate(200, 240);
      rotate(radians(-20));
      translate(-200, -200);
      ellipse(200, 200, 250, 100);


      //top fins
    }
    if (i > 90 && i < 92) {
      fill (0, 150, 50);
      translate(-50, -80);
      rotate(radians(-40)); 
      translate(-200, -200);
      ellipse(200, 200, 100, 200);
    }
    if (i > 86 && i < 88) {
      fill (0, 140, 50);
      translate(-70, -70);
      rotate(radians(-40)); 
      translate(-200, -200);
      ellipse(200, 200, 80, 180);
    }
    if (i > 80 && i < 82) {
      fill (0, 130, 50);
      translate(-65, -45);
      rotate(radians(-50)); 
      translate(-200, -200);
      ellipse(200, 200, 60, 140);
    }
    if (i > 74 && i < 76) {
      fill (0, 120, 50);
      translate(-60, -30);
      rotate(radians(-60)); 
      translate(-200, -200);
      ellipse(200, 200, 40, 120);
    }
    if (i > 68 && i < 70) {
      fill (0, 110, 50);
      translate(-40, -20);
      rotate(radians(-60)); 
      translate(-200, -200);
      ellipse(200, 200, 40, 80);
    }
    if (i > 62 && i < 64) {
      fill (0, 100, 50);
      translate(-30, -20);
      rotate(radians(-70)); 
      translate(-200, -200);
      ellipse(200, 200, 30, 60);
    }

    popMatrix();
    z+=50/350f;
  }
}

void drawMonster(int x, int y, float scaleS) {
  pushMatrix();
  scale(scaleS);
  translate(x, y);
  monsterwave(0, 0);
  popMatrix();
}

// functions for fish
void drawFish (float fishTranslateX, float fishTranslateY, float fishScale, float fishRotate, color fishColor, color fishEyeColor) {
  pushMatrix(); // applies to entire fish
  translate(fishTranslateX, fishTranslateY); // translate entire fish
  rotate(fishRotate); // rotate entire fish
  scale(fishScale); // scale entire fish

  // Body
  fill(fishColor);
  noStroke();
  ellipse(0, 0, 197, 69);
  triangle(-150, 0, -50, -30, -50, 30); // Left
  triangle(50, -30, 150, 0, 50, 30); // Right
  // Tail
  stroke(fishColor);
  strokeWeight(5);
  pushMatrix();
  translate(-150, 0);
  rotate(radians(fishTailMove));
  translate(150, 0);
  line(-150, 0, -187, -25); // END Top Part of Tail
  popMatrix();
  pushMatrix();
  translate(-150, 0);
  rotate(-radians(fishTailMove));
  translate(150, 0);
  stroke(fishColor);
  line(-150, 0, -187, 25);
  popMatrix(); // END Bottom Part of Tail
  // Eye
  fill(fishEyeColor);
  noStroke();
  ellipse(72, -7, 10, 10);

  popMatrix();
}

void fishAnimate() {
  // for Entire Fish
  for (int i = 0; i < fishNumber; i++) {
    fishLoc[i].x = fishLoc[i].x + fishDir[i].x*fishTime;
    fishLoc[i].y = fishLoc[i].y + fishDir[i].y*fishTime;
  }
  // for Tail
  if (fishTailMove > 35) {
    fishTailSwitch = false;
  } else if (fishTailMove < -30) {
    fishTailSwitch = true;
  }
  if (fishTailSwitch == true) {
    fishTailMove+=1;
  } else {
    fishTailMove+=-1;
  }
}

// END functions for fish

// functions for FirstFish

void drawFirstFish (float FirstFishTranslateX, float FirstFishTranslateY, float FirstFishScale, float FirstFishRotate, color FirstFishColor, color FirstFishEyeColor) {
  pushMatrix(); // applies to entire FirstFish

  translate(FirstFishTranslateX, FirstFishTranslateY); // translate entire FirstFish
  rotate(FirstFishRotate); // rotate entire FirstFish
  scale(FirstFishScale); // scale entire FirstFish

  // Body
  fill(FirstFishColor);
  noStroke();
  ellipse(0, 0, 197, 69);
  triangle(-150, 0, -50, -30, -50, 30); // Left
  triangle(50, -30, 150, 0, 50, 30); // Right
  // Tail
  stroke(FirstFishColor);
  strokeWeight(5);
  pushMatrix();
  translate(-150, 0);
  rotate(radians(FirstFishTailMove));
  translate(150, 0);
  line(-150, 0, -187, -25); // END Top Part of Tail
  popMatrix();
  pushMatrix();
  translate(-150, 0);
  rotate(-radians(FirstFishTailMove));
  translate(150, 0);
  stroke(FirstFishColor);
  line(-150, 0, -187, 25);
  popMatrix(); // END Bottom Part of Tail
  // Eye
  fill(FirstFishEyeColor);
  noStroke();
  ellipse(72, 10, 10, 10);

  popMatrix();
}

void FirstFishAnimate() {
  // for Entire Fish
  for (int i = 0; i < FirstFishNumber; i++) {
    FirstFishLoc[i].x = FirstFishLoc[i].x + FirstFishDir[i].x*FirstFishTime;
    FirstFishLoc[i].y = FirstFishLoc[i].y + FirstFishDir[i].y*FirstFishTime;
  }
  // for Tail
  if (FirstFishTailMove > 35) {
    FirstFishTailSwitch = false;
  } else if (FirstFishTailMove < -30) {
    FirstFishTailSwitch = true;
  }
  if (FirstFishTailSwitch == true) {
    FirstFishTailMove+=1;
  } else {
    FirstFishTailMove+=-1;
  }
}

// END functions for FirstFish

void mousePressed() {
  scene = scene + 1;
  println(scene);
}
